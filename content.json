{"meta":{"title":"KAKU日常","subtitle":"不知道该写些啥，但总该夸夸自己","description":"","author":"shamero","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-12-12T13:08:48.000Z","updated":"2019-12-12T13:08:48.021Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-11-09T16:18:40.000Z","updated":"2019-11-09T16:19:25.204Z","comments":true,"path":"link/index.html","permalink":"http://yoursite.com/link/index.html","excerpt":"","text":""},{"title":"","date":"2019-12-13T00:18:44.441Z","updated":"2019-12-12T12:01:44.700Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"layout: tagscomments: false"}],"posts":[{"title":"线性表之单向链表","slug":"线性表之单向链表","date":"2019-12-05T03:09:44.000Z","updated":"2019-12-12T11:54:45.214Z","comments":true,"path":"2019/12/05/线性表之单向链表/","link":"","permalink":"http://yoursite.com/2019/12/05/%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%8B%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/","excerpt":"链表是物理存储结构上非连续，非顺序的存储结构，但是在逻辑上它是通过链表指针指向而实现的顺序结构","text":"链表是物理存储结构上非连续，非顺序的存储结构，但是在逻辑上它是通过链表指针指向而实现的顺序结构 链表与数组的区别 · 数组是静态分布内存，链表是动态分布内存· 数组在内存中是连续的，链表是不连续的· 数组利用下表定位，查找的时间复杂度是O(1),链表通过遍历定位元素，查找的复杂度是O(n)· 数组的插入和移除都需要移动其它元素，时间复杂度是O(n)，；链表的插入或删除不需要移动其它元素，时间复杂度是O(1) 数组的优点 · 随机访问性比较强· 查找速度快 数组的缺点 · 插入和删除的效率低，需要移动其它元素· 会造成内存的浪费，因为内存是连续的，所以在申请数组的时候就必须规定内存的大小，如果长度不合适就会照成内存的浪费· 内存空间的要求高，创建一个数组，必须要有足够的连续内存空间· 数组的大小是固定的，在创建数组的时候就已经规定好，不能够动态拓展 链表的优点 · 插入和删除的效率高，只需要改变指针的指向就可以进行插入和删除· 内存利用效率高，不会浪费内存，可以使用内存中细小的不连续空间，只有在有需要的时候才去创建空间，大小不固定，拓展很灵活 链表的缺点 · 查找效率低，因为链表是从第一个节点向后遍历查找 图表演示 结构体构建单向链表 //结构体定义链表节点typedef struct Listnode&#123; int data; //数据域 ListNode *next; //后继指针&#125;; 尾插法构建单向链表 //尾插法构建单向链表struct Listnode* Creat_Listnode()&#123; struct Listnode *head,*p,*q; head = NULL; int x; while(scanf(\"%d\",&amp;x) &amp;&amp; x&gt;0)&#123; p = (struct Listnode *)malloc(sizeof(struct Listnode)); p-&gt;data = x; p-&gt;next = NULL; if(head == NULL) head = p; else q-&gt;next = p; q = p; &#125; return head;&#125; 获取链表长度 //获取链表长度int Length_Listnode(struct Listnode *head)&#123; int len = 0; struct Listnode *t; t = head; while(t != NULL)&#123; len++; t = t-&gt;next; &#125; return len;&#125; 链表排序 //链表排序void Sort_Listnode(struct Listnode *head)&#123; int len = Length_Listnode(head); if (len == 0) return; struct Listnode *p = head; int tmp; for (int i = 0; i&lt;len-1; i++)&#123; //冒泡排序的思想 p = head; for (int j = 0; j &lt; len-i-1; j++)&#123; if (p-&gt;data &gt; p-&gt;next-&gt;data)&#123; tmp = p-&gt;data; p-&gt;data = p-&gt;next-&gt;data; p-&gt;next-&gt;data = tmp; &#125; p = p-&gt;next; &#125; &#125;&#125; 链表插入节点 ·主要头节点与尾节点 //顺序插入节点struct Listnode* Insert_Listnode(struct Listnode *head, int x)&#123; struct Listnode *t,*p; t = head; p = (struct Listnode*)malloc(sizeof(struct Listnode)); if(x &lt; head-&gt;data)&#123; //插入头节点 p-&gt;data = head-&gt;data; p-&gt;next = head-&gt;next; head-&gt;data = x; head-&gt;next = p; &#125; else&#123; //非头节点插入 while(t!=NULL)&#123; if(t-&gt;next==NULL || t-&gt;next-&gt;data &gt;x)&#123; p-&gt;data=x; p-&gt;next=t-&gt;next; //新增指针的后继指针指向当前后继指针指向的结点 t-&gt;next=p; //当前指针的后继指针指向当前指针 break; //注意是否要跳出，跳出只删除符合的第一个数吗，不跳则删除所有符合的数 &#125; t=t-&gt;next; &#125; &#125; return head;&#125; 链表删除 ·同样是要注意头和尾滴 //删除链表节点struct Listnode* Delete_Listnode(struct Listnode *head, int x)&#123; struct Listnode *t,*p; t=head; if(head-&gt;data == x)&#123; //头节点删除 p = head-&gt;next; head-&gt;data = head-&gt;next-&gt;data; head-&gt;next = head-&gt;next-&gt;next; free(p); //free()释放内存空间 &#125; else&#123; //非头节点删除 while(t != NULL)&#123; if(t-&gt;next-&gt;data == x)&#123; p = t-&gt;next; t-&gt;next = p-&gt;next; free(p); break; &#125; t = t-&gt;next; &#125; &#125; return head;&#125; 链表打印 //打印链表void Print_Listnode(struct Listnode *head)&#123; Listnode *t; t = head; if(t == NULL) //判断链表为空 printf(\"!链表为空!\"); else&#123; //顺序打印链表 while(t != NULL)&#123; printf(\"%d \",t-&gt;data); t = t-&gt;next; &#125; &#125;&#125; 以上就是涉及到链表的所有操作，包括创建、排序、插入、删除、打印等，了解链表的思想，主要是要注意表头，表中和表位，以及地址的指向。emmmm,其实c++，Java应该是用面向对象的写法来写。什么，你没有对象，new一个就好了 //滑稽 完整的代码我就不贴了，略略略(主要是比较长，我都要哭了)","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"C语言基础","slug":"C语言基础","date":"2019-12-05T01:09:35.000Z","updated":"2019-12-12T11:54:45.160Z","comments":true,"path":"2019/12/05/C语言基础/","link":"","permalink":"http://yoursite.com/2019/12/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/","excerpt":"C语言是一门面向过程的计算机编程语言，它的设计目标是提供一种能以简易的方式编译、处理低级存储器、仅产生少量的机器码以及不需要任何运行环境支持便能运行的编程语言。C语言描述问题比汇编语言迅速、工作量小、可读性好、易于调试、修改和移植，而代码质量与汇编语言相当。","text":"C语言是一门面向过程的计算机编程语言，它的设计目标是提供一种能以简易的方式编译、处理低级存储器、仅产生少量的机器码以及不需要任何运行环境支持便能运行的编程语言。C语言描述问题比汇编语言迅速、工作量小、可读性好、易于调试、修改和移植，而代码质量与汇编语言相当。 算法结构 · 顺序结构· 选择结构· 循环结构· 循环结构又分为while型、until型、for循环结构 结构化程序设计方法 · 自顶向下· 逐步细化· 模块化设计· 结构化编码 数据类型 常量：常量包括字面常量、直接常量和符号常量 变量：C语言规定标志符只能由字母、数字和下划线三种字符组成，且第一个字符必须是字母或者下划线；必须压迫先定义后使用；每一个变量被定义以确定类型后，在编译时就能为其分配相应的存储单元 整数类型：整数常量有十进制、八进制和十六进制；“%d” 整形变量：数据在内存中存放形式是以二进制形式存放；有int型、short int型和long int型，无符号整型变量的范围是-32768—32767，有符号型为0~65535.通常把long定义为32位，把short定义为16位，int可以是32位也可以为16位，这都主要取决于机器字长。 实型常量的表示方法： 十进制，0.0指数形式，123e3实型变量：实数型数据在内存中的存放形式，一般在内存中占4个字节，分成整数部分和小数部分存放。实型变量分为float型、double型long double型。实型数据会存在舍入误差。实型常量的类型：C编译系统将实型常量作为双精度来处理。 字符型数组： 字符常量：转义字符（\\n——换行，\\t——tab,\\r——回车，\\f——换页，\\b——退格，\\ddd——1到3位8进制的数代表的字符）字符变量：字符数据存储形式实际是以ASCII码存储。“%c”字符串常量：双撇号括起来的一系列字符序列 C的运算符 1、算术运算符（+ - * / %）结合方向自左向右 2、关系运算符（&gt; &lt; == &gt;= &lt;= !=） 3、逻辑运算符(! &amp;&amp; ||) 4、位运算符(&lt;&lt; &gt;&gt; ~ | ^ &amp;) 5、赋值运算符(=及符号扩展赋值运算符) 6、条件运算符(? : ) 7、逗号运算符( , ) 8、指针运算符（* &amp;） 9、求字节运算符（sizeof） 10、强制类型转换运算符((类型)) 11、分量运算符( . -&gt;) 12、下标运算符([]) 13、其他 数组 一维数组的定义：类型说明符 数组名【常量表达式】；先定义后引用；一维数组初始化时可以只对一部分元素初始化，在对全部数组元素初始化的时候可以部规定长度；但是若被定义的数组长度与提供的初始值不一样时，则数组长度不能省略。 二维数组的定义：类型说明符 数组名【常量表达式】【常量表达式】C语言中存放二维数组是先存放第一行的元素，紧接着是第二行，其实也是以一维的方式存放。如果初始化时能指定所有元素的初始值，第一维大小可以省略，但是第二维不能省略。 字符数组：定义和初始化跟数组差不多，只是需要加单引号。字符和字符串结束标志，C语言规定，以‘\\0’代表。 字符串处理函数 1、puts()将一个字符串输出到终端 2、gets（）从终端输入一个字符串到字符数组，并且得到一个函数值。 3、strcat（）链接两个字符数组中的字符串。 4、strcpy（）字符串复制函数。 5、strcmp（）比较字符串作用。 6、strlen（）测试字符串长度的函数不包括“\\0” 7、strlwr（）将字符串中的大写字母转换为小写字母。 8、strupr（）将字符串中的小写字母转换为大写字母。 形参与实参 (1) 在定义函数中指定的形参，在未出现函数调用时，他们并不占用内存中的存储单元，只有发生调用时，才会分配内存。 (2) 实参可以是常量、变量或者表达式；有时传递的时地址； (3) 在被定义中，形参必须指定类型； (4) 实参与形参的类型应相同或赋值兼容； (5) C语言规定，实参变量对形参变量的数据传递是“值传递”，即单向传递，只有实参传递给形参，而不能由形参传递给实参。 局部变量和全局变量： （一）局部变量在一个函数内部定义的变量是内部变量，它只是在本函数范围内的有效，主函数也不能使用其它函数中定义的变量；不同函数中可以使用相同的名字的变量，他们代表不同的对象，互不干扰；形式参数也是局部变量；在一个函数内部，可以在复合语句中定义变量，这些变量只在本复合语句中有效，这种复合句也可以称为“分程序”或“程序块”； （二）全局变量，在函数之外定义的变量称为外部变量，全局变量可以增加函数间数据联系的渠道，一般不再必要时不要使用，他在程序的全部执行过程中占用存储单元，是函数的通用性，使用全局变量会使程序的清晰性降低。还要注意若果同一源文件中，外部变量和局部变量同名，则在局部变量作用范围内，外部变量被“屏蔽”，不起任何作用。","categories":[],"tags":[{"name":"C语言学习","slug":"C语言学习","permalink":"http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"}]},{"title":"c++&vector","slug":"c-vector","date":"2019-12-03T09:20:26.000Z","updated":"2019-12-12T11:54:45.156Z","comments":true,"path":"2019/12/03/c-vector/","link":"","permalink":"http://yoursite.com/2019/12/03/c-vector/","excerpt":"在c++中，vector是一个十分有用的容器。 作用：它能够像容器一样存放各种类型的对象，简单地说，vector是一个能够存放任意类型的动态数组，能够增加和压缩数据。 vector在C++标准模板库中的部分内容，它是一个多功能的，能够操作多种数据结构和算法的模板类和函数库。","text":"在c++中，vector是一个十分有用的容器。 作用：它能够像容器一样存放各种类型的对象，简单地说，vector是一个能够存放任意类型的动态数组，能够增加和压缩数据。 vector在C++标准模板库中的部分内容，它是一个多功能的，能够操作多种数据结构和算法的模板类和函数库。 特别注意： 使用vector需要注意以下几点： 1.加入头文件(vector) 2.如果你要表示的向量长度较长（需要为向量内部保存很多数），容易导致内存泄漏，而且效率会很低； 3.Vector作为函数的参数或者返回值时，需要注意它的写法： ==double Distance(vector&amp;a, vector&amp;b) 其中的“&amp;”绝对不能少！！！== 一维vector创建一维vector： vector&lt;int&gt; nums; //不指定长度 vector&lt;int&gt; nums(n); //指定长度为n添加元素 nums.push_back(1); //直接从数组末端添加 nums[i]=1; //直接赋值给第i个位置 nums.insert(nums.begin()+i,a); //在第i+1个元素前插入a删除元素 nums.resize(nums.size-i); //直接将数组长度减少，某种意义上删掉了后面i个 nums.pop_back(); //删掉最后一个元素 nums.erase(nums.begin()+i); //删掉第i+1个元素 nums.erase(nums.begin()+i,nums.end()+j); //删除区间[i,j-1],区间从0开始 nums.clear(); //清空其它 获取长度：nums.size(); 排序(O(nlogn))：sort(nums.begin(),nums.end()); 翻转：reverse(nums.begin(),nums.end()); 合并两个vector：合并nums1和nums2，并将合并的数组赋值给nums vector&lt;int&gt; nums1(m),nums2(n);vector&lt;int&gt; nums;nums.resize(m+n);merge(nums1.begin(),nums1.end(),nums2.begin(),nums2.end(),nums); 二维vector创建M*n二维vector vector&lt; vector&lt;int&gt; &gt; nums(m,vector&lt;int&gt;(n)); //m*n的二维vector解释： 定义了一个vector容器，元素类型为vector，初始化为包含m个vector对象，每个对象都是一个新创立的vector对象的拷贝，而这个新创立的vector对象被初始化为包含n个0。 vector(n)表示构造一个无名且含n个0的vector对象。 动态创建m*n的二维vector ==方法一== vector&lt;vector &lt;int&gt; &gt; nums;3nums.resize(m);for(int i=0;i&lt;m;i++) nums[i].resize(n); ==方法二== vector&lt;vector &lt;int&gt; &gt; nums;nums.resize(m,vector&lt;int&gt;(n)); 初始化二维数组 vector&lt;vector &lt;int&gt; &gt; nums(m ,vector&lt;int&gt;(n,0)); //m*n的二维vector，所有元素为0获得二维数组的行数：nums.size(); 获得二维数组的列数：nums[0].size()； 数组遍历 int m = nums.size(),n = nums[0].size();for(int i = 0; i &lt; m; i++)&#123; for(int j = 0; j &lt; n; j++)&#123; cout&lt;&lt;nums[i][j]&lt;&lt;endl; &#125;&#125; 用vector还可以用结构体类型哟","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"},{"name":"STL","slug":"STL","permalink":"http://yoursite.com/tags/STL/"}]},{"title":"最近好像有点飘","slug":"最近好像有点飘","date":"2019-11-26T06:13:51.000Z","updated":"2019-12-12T13:12:48.756Z","comments":true,"path":"2019/11/26/最近好像有点飘/","link":"","permalink":"http://yoursite.com/2019/11/26/%E6%9C%80%E8%BF%91%E5%A5%BD%E5%83%8F%E6%9C%89%E7%82%B9%E9%A3%98/","excerpt":"闲来回想了下自己最近，好像非常忙，又好像非常闲，忙这忙那的，似乎并没有学到太多。","text":"闲来回想了下自己最近，好像非常忙，又好像非常闲，忙这忙那的，似乎并没有学到太多。 进入到新的生活，因为之前学过自己专业所需要的技术，也和许多优秀的人(他们才是真正的大佬，我真的就是个渣渣啊啊啊)一起玩耍，打比赛，熬夜码代码。可是，来到这里，好像失去了当初的那份热爱，忘记了自己的本心。一天一天的混过一节又一节课。曾经计划要学的，也都还没有动。 我，应该清醒清醒了，在别人正在重点大学里寻求高峰，甚至有些曾经朝夕相处的伙伴在之前早就拿到了国外名校的offer，而我，在干什么 我却在浑浑噩噩的活着 生活从来没有安逸，寻求难度与刺激才是真正的我 我或许知道我要做的是什么了 Everyone should have a dream and fight for it","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"心情","slug":"心情","permalink":"http://yoursite.com/tags/%E5%BF%83%E6%83%85/"}]},{"title":"排序之归并排序","slug":"排序之归并排序","date":"2019-11-26T01:26:33.000Z","updated":"2019-12-12T11:54:45.195Z","comments":true,"path":"2019/11/26/排序之归并排序/","link":"","permalink":"http://yoursite.com/2019/11/26/%E6%8E%92%E5%BA%8F%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","excerpt":"来说说归并排序是啥？归并排序就是排序呗。啥，啥排序？归并呗。 哔bibibi(瞎哔哔)","text":"来说说归并排序是啥？归并排序就是排序呗。啥，啥排序？归并呗。 哔bibibi(瞎哔哔) 好吧,归并排序，是创建在归并操作上的一种有效的排序算法，效率为O(nlogn)。1945年由约翰·冯·诺伊曼首次提出。该算法是采用分 治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。速度仅次于快速排序，为稳定排序算法，一般用 于对总体无序，但是各子项相对有序的数列，归并排序的比较次数小于快速排序的比较次数，移动次数一般多于快速排序的移动次数。 算法思想 该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶 段则将分的阶段得到的各答案”修补”在一起，即分而治之)。既然归并排序采用的是分治法，并且依托于归并操作，那么其思想肯定是分 而治之。我们知道归并操作是将两个有序的数列合并到一个有序的序列，那么对于一个无序的长序列，可以把它分解为若干个有序的子 序列，然后依次进行归并。如果我们说每一个数字都是单独有序的序列，那么只要把原始长序列依次分解，直到每个子序列都只有一个 元素的时候，再依次把所有的序列进行归并，直到序列数为1 综上可知： 归并排序其实要做两件事： （1）“分解”——将序列每次折半划分。（2）“合并”——将划分后的序列段两两合并后排序。 算法步骤 (1)申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列； (2)设定两个指针，最初位置分别为两个已经排序序列的起始位置； (3)比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置； (4)重复步骤 3 直到某一指针达到序列尾； (5)将另一序列剩下的所有元素直接复制到合并序列尾。 话不多说，上代码 #include &lt;iostream&gt;#include &lt;cstring &gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;using namespace std;//归并过程void merge(int arr[], int l, int mid, int r)&#123; int help[r-l+1];//辅助数组 int i = 0; int lIndex = l; int rIndex = mid+1; while(lIndex &lt;= mid &amp;&amp; rIndex &lt;= r)&#123; help[i++] = arr[lIndex] &lt; arr[rIndex] ? arr[lIndex++]:arr[rIndex++]; &#125; //左边和右边肯定有一边到头了，不可能同时，因为每次只移动一边 while(lIndex &lt;= mid)&#123; help[i++] = arr[lIndex++]; &#125; while(rIndex &lt;= r)&#123; help[i++] = arr[rIndex++]; &#125; //将排好序的辅助数组赋值给原始数组，不需要返回值 for(i = 0; i &lt; r-l+1; i++)&#123; arr[l+i] = help[i]; &#125;&#125;//递归static void msort(int arr[], int l, int r)&#123; if(l == r)&#123; return; &#125; int mid = (l + r) / 2; //左半部分归并排序 msort(arr, l, mid); //右半部分归并排序 msort(arr, mid+1, r); //左右部分归并 merge(arr, l, mid, r);&#125;//归并排序整个数组 void msort(int arr[], int n)&#123; //如果数组为空或只有一个元素，不需要排序 if(arr == NULL || n &lt; 2)&#123; return; &#125; msort(arr,0,n-1);&#125;int main()&#123; int arry[100]; int n; cin&gt;&gt;n; for(int i=0; i&lt;n; i++) cin&gt;&gt;arry[i]; msort(arry, n); for(int i=0; i&lt;n; i++) cout&lt;&lt;arry[i]&lt;&lt;\" \"; return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"排序之快速排序","slug":"排序之快速排序","date":"2019-11-24T10:46:56.000Z","updated":"2019-12-12T11:54:45.191Z","comments":true,"path":"2019/11/24/排序之快速排序/","link":"","permalink":"http://yoursite.com/2019/11/24/%E6%8E%92%E5%BA%8F%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","excerpt":"快排及快速排序，是排序算法中比较快速常用的一种排序方式","text":"快排及快速排序，是排序算法中比较快速常用的一种排序方式 一 基本原理快速排序的根本可以说就是通过分治法来实现，简单举一个例子来理解一下快速排序的过程。 我们现在对（56，28，45，93，10，32，44，95，60，58）进行排序。首先我们定义三个量，i，j，flag。i是数组第一个值的下表即i=0。j是数组最后一个值的下表即j=9，flag就是数组的第一个值即flag=56，现在我们要做的就是讲这个数组中所有比flag小的数放到他的前面，把所有比flag大的数放到他的后面。 第一步从j开始向左（前）找，找到第一个比flag小的数，是下标为6的数44，我们就将44与flag56进行交换从而使数组变成（44，28，45，93，10，32，56，95，60，58），此时的j=6 第二步从i开始向右（后）找，找到第一个比flag大的数，是下标为3的数93，我们就将93与flag56进行交换从而使数组变成（44，28，45，56，10，32，93，95，60，58），此时的i=3 第三步继续从j（此时j=6）开始向左找，找到比flag小的数，是下标为5的数32，我们将32与flag进行交换，得到数组（44，28，45，32，10，56，93，95，60，58），此时j=5 第四步从i（此时i=3）开始向右找，找到比flag大的数，直到i=j,我们发现在j之前已经找不到比flag更大的数，此时快速排序的第一轮就已经结束，这个时候在flag之前的数都是比他小的，在他之后都是比他大的，我们再将flag前后两片区域重新定义成新的无序的数组，分别对他们重复刚才的过程，直到分解到每个重新划分的区域内只有一个值，排序就算完成了。我们直接将过程贴在下面 （44，28，45，32，10）（56）（93，95，60，58） （10，28，45，32，44）（56）（58，95，60，93） （10，28，44，32，45）（56）（58，93，60，95） （10，28，32，44，45）（56）（58，60，93，95） （10，28，32）（44）（45）（56）（58）（60）（93）（95） （10）（28）（32）（44）（45）（56）（58）（60）（93）（95） 排序结束 二 稳定性问题&emsp;&emsp;首先大家应该都知道快速排序是一个不稳定排序算法，那么到底什么才是排序的稳定性呢，我认为通俗的讲有两个相同的数A和B，在排序之前A在B的前面，而经过排序之后，B跑到了A的前面，对于这种情况的发生，我们管他叫做排序的不稳定性，而快速排序在对存在相同数进行排序时就有可能发生这种情况。 &emsp;&emsp;例如（5，3A，6，3B）对这个进行排序，排序之前相同的数3A与3B，A在B的前面，经过排序之后会变成（3B，3A，5，6），所以说快速排序是一个不稳定的排序 三 时间复杂度 == 简单的总结一下快速排序的时间复杂度问题 == 最优情况:每一次的flag刚好都可以平分整个数组，此时的时间复杂度为O(nlogn) 最坏情况:每一次的flag刚好都是最大或者最小的数，此时的时间复杂度为O(n2) 平均情况:经过推到平均情况为O(nlogn) 代码演示/**qsort 快速排序*@auther wyt*/#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;int a[200];//定义快排函数void qsort(int l, int r) &#123; int i, j, mid, t; i = l; j = r; mid = a[(l + r) / 2]; do &#123; while (a[i] &lt; mid) i++; //寻找左边小于mid的数 while (a[j] &gt; mid) j--; //寻找右边小于mid的数 if (i &lt;= j) &#123; t = a[i]; //进行数值交换 a[i] = a[j]; a[j] = t; i++; //继续寻找 j--; &#125; &#125; while (i &lt;= j); if (j &gt; l) qsort(l, j); //继续快排左右子序列 if (i &lt; r) qsort(i, r);&#125;int main()&#123; int n; cin&gt;&gt;n; for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i]; qsort(1, n); for (int i = 1; i &lt;= n; i++) cout &lt;&lt; a[i] &lt;&lt; \" \"; return 0;&#125; ~ PS ~ C++中有自带的快排库()，用法：sort(*array+left , *array+right) C中的库是在(&lt;stdlib.h&gt;)中用法： qsort(a, 1000, sizeof(int), cmp);//其中cmp函数应写为：int cmp(const void *a, const void *b)&#123; return *(int*)a - *(int*)b; //由小到大排序 //return *(int *)b - *(int *)a; 由大到小排序&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"排序之选择排序","slug":"排序之选择","date":"2019-11-20T15:30:07.000Z","updated":"2019-12-12T11:54:45.203Z","comments":true,"path":"2019/11/20/排序之选择/","link":"","permalink":"http://yoursite.com/2019/11/20/%E6%8E%92%E5%BA%8F%E4%B9%8B%E9%80%89%E6%8B%A9/","excerpt":"之前谈过冒泡排序，今天谈谈选择排序。选择排序，从头至尾扫描序列，找出最小的一个元素，和第一个元素交换，接着从剩下的元素中继续这种选择和交换方式，最终得到一个有序序列。","text":"之前谈过冒泡排序，今天谈谈选择排序。选择排序，从头至尾扫描序列，找出最小的一个元素，和第一个元素交换，接着从剩下的元素中继续这种选择和交换方式，最终得到一个有序序列。 文字说明 第1趟比较：拿第1个元素依次和它后面的每个元素进行比较，如果第1个元素大于后面某个元素，交换它们，经过第1趟比较，数组中最小的元素被选出，它被排在第一位 第2趟比较：拿第2个元素依次和它后面的每个元素进行比较，如果第2个元素大于后面某个元素，交换它们，经过第2趟比较，数组中第2小的元素被选出，它被排在第二位…… 第n-1趟比较：第n-1个元素和第n个元素作比较，如果第n-1个元素大于第n个元素，交换它们 图像演示 核心代码演示for(int i = 0; i &lt; nums.length - 1; i++) &#123; for(int j = i + 1; j &lt; nums.length; j++) &#123; if(nums[i] &gt; nums[j]) &#123; swap(nums[i], nums[j]); 交换nums[i]和nums[j]的值 &#125; &#125; &#125; 复杂度 时间复杂度：O(n²) 空间复杂度：O(1)，只需要一个附加程序单元用于交换 稳定性：选择排序是不稳定的排序算法，因为无法保证值相等的元素的相对位置不变，例如 [3, 4, 3, 1, 5]这个数组，第一次交换，第一个3和1交换位置，此时原来两个3的相对位置发生了变化。 算法优化上面的算法的缺点：在每趟比较过程中，一旦发现某个元素比第1位的元素小，就交换它们，但这是没必要的，徒增了交换的次数。优化：选择排序的核心是，在每趟比较中，找到本趟中最小的元素放在本趟比较的第1个位置，所以选择排序的每趟比较只需要交换一次即可，只要找到本趟比较中最小的元素和本趟比较中第1位置的元素交换即可。","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"人生路不长，别再等以后(转载)","slug":"人生路不长，别再等以后-转载","date":"2019-11-12T01:43:54.000Z","updated":"2019-12-12T13:12:25.207Z","comments":true,"path":"2019/11/12/人生路不长，别再等以后-转载/","link":"","permalink":"http://yoursite.com/2019/11/12/%E4%BA%BA%E7%94%9F%E8%B7%AF%E4%B8%8D%E9%95%BF%EF%BC%8C%E5%88%AB%E5%86%8D%E7%AD%89%E4%BB%A5%E5%90%8E-%E8%BD%AC%E8%BD%BD/","excerpt":"人生路不长，别再等以后","text":"人生路不长，别再等以后 一辈子很短，短得来不及细算童年，不知不觉没了青春，不知不觉没了而那些无忧无虑的快乐好像也消失不见了一辈子三万天而已没有你想得那么长有什么心愿，快点实现有什么目标，快点奋战别等来等去等来了年龄增长等来了热情褪去人生不是花，败了再开身体不是叶，落了再生我们每个人都只有一次人生，只有一个身体生病不能等，健康没了，人就完了人生不能等，时间过了，人就终了一辈子不长，别再等以后想吃的东西，去吃想做的事情，趁早想要的感情，去追想去的地方，快去别一等再等等牙没有了，想吃就难了等人离开了，想爱就晚了一辈子很短，这一生短暂时间不等人，岁月不等你趁我们都还活着对父母，孝顺点，对爱人，珍惜点对朋友，真心点，对自己，好一点 ``` End","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"心情","slug":"心情","permalink":"http://yoursite.com/tags/%E5%BF%83%E6%83%85/"}]},{"title":"学计算机的都是一群疯子(转载)","slug":"学计算机的都是一群疯子-转载","date":"2019-11-11T07:53:25.000Z","updated":"2019-12-12T13:12:55.682Z","comments":true,"path":"2019/11/11/学计算机的都是一群疯子-转载/","link":"","permalink":"http://yoursite.com/2019/11/11/%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E9%83%BD%E6%98%AF%E4%B8%80%E7%BE%A4%E7%96%AF%E5%AD%90-%E8%BD%AC%E8%BD%BD/","excerpt":"一名计算机专业的吐槽，，，无奈╮(╯▽╰)╭","text":"一名计算机专业的吐槽，，，无奈╮(╯▽╰)╭ 学计算机的你们伤不起啊！！！！！！！你们学得都是人说的语言啊！！！！！！好歹有点腔调肢体环境神马的做参考！！！！！哥学得是计算机语言啊！！！！！！ 计算机不会跟你点头yes摇头no啊！！！！！它就会报一堆不知所云的错误啊！！！！有木有！！！！ 有时候啥都不报，直接崩溃啊！！！有木有！！！法语德语数字难念！！！！！你随便找本算法书啊！！！！！厚的跟《康熙字典》一啊！！！！有木有！！！！！各种堆！！！栈！！！树！！！！图！！！！说到树就泪目啊！！！！ 光树就分生成树！！最小生成树！！有向树！！非平凡有向树！！二叉树！！平凡二叉树！！平衡二叉树！！完全二叉树！！完全正则二叉树！！哈夫曼树！！晕了没？ 还要遍历！！！前序中序后序！！！汇编语言！！！看着就是乱码啊！！！光寄存器就有N个啊！！！就差没写二进制来编程了啊！！！！！写个最简单的两数相加就要死人啊！！！！C++啊！！！！一个指针就能搞死你！！！！内存溢出那是普遍的！！！！链表啊！！！还双向链表啊！！！彻底的坑死哥啊！！！java啊！！！各种框架就是搞出来坑哥的啊！！！！！一个spring能从今年spring学到明年spring！！！！有木有！！！！好不容易学会了！！！！！！又给淘汰了！！！新框架又出来了！！！！有木有！！！！！！操作系统！！！Linux服务器！！！要记各种命令啊！！！vi编辑器那简直是折翼啊！！！！Linux内核啊！！！ 研究出来孩子都多大了！！！！数据库！！！！ 又学一门SQL语言！！！！MySql跟orcle的SQL还不一样！！！！group by，order by！！！！左连接右连接交叉连接！！！笛卡尔集！！！！你们写错个把单词不影响理解！！！！！计算机你错个标点它都不搭理你！！！！ 体会过系统不断崩溃就是找不到原因的闷骚心情么！！！！！一群人熬夜一个星期！！！最后发现是一行注释多敲了个回车键！！！！bug总是越改越多！！！还有玩着小游戏的测试员拿着小鞭子敲打你！！！！！好不容易做出来了！！！！ 客户一句话：“改”！！！！ 又是加班熬夜暗无天日啊！！！！！当年怎么想起来学计机！！！ 学计算机你们伤不起啊！！ ！！ 天杀的专业啊！！！别人知道你是个学个计算机的！！！！平时拍个照啊修个图啊！！！装个电脑啊！！！！装个系统啊！！！！修个打印机都TM找我！！！！！哥只是个计算机专业的学的还是网络工程。。。。。为嘛跟计算机沾边的老子都要会啊！！！！更牛的excel表格出个问题都找我！！！！哥哥只是个学计算机的倒霉蛋！！！！不是神仙啊！！！！！！！ 跟人家解释，你是做软件的，不是修电脑的，你也不知道这个电脑值多少钱，人家就会以为你明明知道不肯告诉他那种鄙夷。。。。。。。。。靠！！！！我现在都练出来了！！！被别人的白眼逼出来了。。。装电脑！！！装系统！！！修电脑！！！修打印机！！！和现在电脑 相机以及电脑周边产品的物价！！！！！！！我都快成全能了！！！！！！！！！！！悲催了！！！！！！！！！我连硒鼓加粉都会了！！！！！我还有神马不会的！！！！！！ 原文地址：学计算机的都是一群疯子","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"心情","slug":"心情","permalink":"http://yoursite.com/tags/%E5%BF%83%E6%83%85/"}]},{"title":"flybird","slug":"flybird","date":"2019-11-11T07:49:19.000Z","updated":"2019-12-12T11:54:45.164Z","comments":true,"path":"2019/11/11/flybird/","link":"","permalink":"http://yoursite.com/2019/11/11/flybird/","excerpt":"一个简单的C++小游戏","text":"一个简单的C++小游戏 代码如下：#include &lt;algorithm&gt;#include &lt;conio.h&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cstdlib&gt;#include &lt;ctime&gt;#include &lt;windows.h&gt;const int Lines = 35;const int Columns = 120;const int LeftLineColumn = 20;HANDLE hOut;DWORD dword;char tmp[1000];int cur_time, start_time, last_time;int score;void DrawBird(double xx, double yy) &#123; int x = (int)(xx + 0.5); int y = (int)(yy + 0.5); static DWORD dword; WriteConsoleOutputCharacter(hOut, \"v\", 1, (COORD)&#123;x, y - 1&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \"&gt;&gt;&gt;\", 3, (COORD)&#123;x - 1, y&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \"^\", 1, (COORD)&#123;x, y + 1&#125;, &amp;dword);&#125;void ClearBird(double xx, double yy) &#123; int x = (int)(xx + 0.5); int y = (int)(yy + 0.5); WriteConsoleOutputCharacter(hOut, \" \", 1, (COORD)&#123;x, y - 1&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \" \", 3, (COORD)&#123;x - 1, y&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \" \", 1, (COORD)&#123;x, y + 1&#125;, &amp;dword);&#125;/* Write at Middle/Left */inline void WriteMiddle(const char* str, int y) &#123; int l = strlen(str); WriteConsoleOutputCharacter(hOut, str, l, (COORD)&#123;(Columns - l) / 2, y&#125;, &amp;dword);&#125;inline void WriteLeft(const char* str, int y) &#123; int l = strlen(str); WriteConsoleOutputCharacter(hOut, str, l, (COORD)&#123;1, y&#125;, &amp;dword);&#125;void InitLeftSide() &#123; for (int i = 0; i &lt; Lines; ++i) WriteConsoleOutputCharacter(hOut, \"|\", 2, (COORD)&#123;LeftLineColumn, i&#125;, &amp;dword); int p = 0; ++p; WriteLeft(\"Help:\", p); ++p; WriteLeft(\" Press &lt;Space&gt; to\", p); ++p; WriteLeft(\"make the bird fly.\", p); ++p; WriteLeft(\" Don't fall to the\", p); ++p; WriteLeft(\"ground or hit pipes\", p); ++p; // Empty line ++p; WriteLeft(\"Time:\", p); ++p; // Time ++p; WriteLeft(\"Fps:\", p); ++p; // Fps ++p; // Empty line ++p; WriteLeft(\"Score:\", p); ++p; // Score&#125;void DrawLeftSide() &#123; int p = 0; ++p; // WriteLeft(\"Help:\", p); ++p; // WriteLeft(\" Press &lt;Space&gt; to\", p); ++p; // WriteLeft(\"make the bird fly.\", p); ++p; // WriteLeft(\" Don't fall to the\", p); ++p; // WriteLeft(\"ground or hit pipes\", p); ++p; // Empty line ++p; // WriteLeft(\"Time:\", p); sprintf(tmp, \" %5.2lfs\", (double)(cur_time - start_time) / CLOCKS_PER_SEC); ++p; WriteLeft(tmp, p); ++p; // WriteLeft(\"Fps:\", p); sprintf(tmp, \" %5.2lf\", CLOCKS_PER_SEC / (double)(cur_time - last_time)); ++p; WriteLeft(tmp, p); ++p; // Empty line ++p; // WriteLeft(\"Score:\", p); sprintf(tmp, \" %3d\", score); ++p; WriteLeft(tmp, p);&#125;struct Pipe&#123; int H, D; // A Pipe, [x, x + 1] * ([0, H] and [D, Lines)) double x;&#125;;inline int RandRange(int l, int r) &#123; return rand() % (r - l + 1) + l; &#125;inline Pipe RandomPipe(int x) &#123; int br = RandRange(8, 10); int h = RandRange(3, Lines - br - 3); return (Pipe)&#123;h, h + br, (double)x&#125;;&#125;inline bool CheckPipe(int x, double y, const Pipe &amp;p) &#123; int px = (int)(p.x + 0.5); int dx = std::min(std::abs(x - px), std::abs(x - px - 1)); if (dx &gt; 2) return true; else if (dx == 2) return y &gt; p.H - 0.5 &amp;&amp; y &lt; p.D + 0.5; else if (dx == 1) return y &gt; p.H + 0.5 &amp;&amp; y &lt; p.D - 0.5; else return y &gt; p.H + 1.5 &amp;&amp; y &lt; p.D - 1.5;&#125;void ClearPipe(const Pipe &amp;p) &#123; int px = (int)(p.x + 0.5); if (px != LeftLineColumn &amp;&amp; px + 1 &lt; Columns) &#123; for (int i = 0; i &lt; p.H; ++i) WriteConsoleOutputCharacter(hOut, \" \", 2, (COORD)&#123;px, i&#125;, &amp;dword); for (int i = p.D + 1; i &lt; Lines; ++i) WriteConsoleOutputCharacter(hOut, \" \", 2, (COORD)&#123;px, i&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \" \", 2, (COORD)&#123;px + 1, p.H&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \" \", 2, (COORD)&#123;px + 1, p.D&#125;, &amp;dword); &#125; else &#123; int x = px == LeftLineColumn ? px + 1 : px; for (int i = 0; i &lt; p.H; ++i) WriteConsoleOutputCharacter(hOut, \" \", 1, (COORD)&#123;x, i&#125;, &amp;dword); for (int i = p.D + 1; i &lt; Lines; ++i) WriteConsoleOutputCharacter(hOut, \" \", 1, (COORD)&#123;x, i&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \" \", 1, (COORD)&#123;x, p.H&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \" \", 1, (COORD)&#123;x, p.D&#125;, &amp;dword); &#125;&#125;void DrawPipe(const Pipe &amp;p) &#123; int px = (int)(p.x + 0.5); if (px &lt; LeftLineColumn) return; if (px != LeftLineColumn &amp;&amp; px + 1 &lt; Columns) &#123; for (int i = 0; i &lt; p.H; ++i) WriteConsoleOutputCharacter(hOut, \"||\", 2, (COORD)&#123;px, i&#125;, &amp;dword); for (int i = p.D + 1; i &lt; Lines; ++i) WriteConsoleOutputCharacter(hOut, \"||\", 2, (COORD)&#123;px, i&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \"--\", 2, (COORD)&#123;px, p.H&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \"--\", 2, (COORD)&#123;px, p.D&#125;, &amp;dword); &#125; else &#123; int x = px == LeftLineColumn ? px + 1 : px; for (int i = 0; i &lt; p.H; ++i) WriteConsoleOutputCharacter(hOut, \"|\", 1, (COORD)&#123;x, i&#125;, &amp;dword); for (int i = p.D + 1; i &lt; Lines; ++i) WriteConsoleOutputCharacter(hOut, \"|\", 1, (COORD)&#123;x, i&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \"-\", 1, (COORD)&#123;x, p.H&#125;, &amp;dword); WriteConsoleOutputCharacter(hOut, \"-\", 1, (COORD)&#123;x, p.D&#125;, &amp;dword); &#125;&#125;inline void HideCursor() &#123; CONSOLE_CURSOR_INFO cci; GetConsoleCursorInfo(hOut,&amp;cci); cci.bVisible = FALSE; SetConsoleCursorInfo(hOut,&amp;cci);&#125;void Init() &#123; srand(time(NULL)); sprintf(tmp, \"mode con lines=%d cols=%d\", Lines, Columns); system(tmp); hOut = GetStdHandle(STD_OUTPUT_HANDLE); HideCursor(); InitLeftSide(); WriteMiddle(\"Flappy bird (Simple)\", Lines / 2 - 1); WriteMiddle(\"--By _wyt\", Lines / 2); WriteMiddle(\"Press any key to start...\", Lines / 2 + 1); _getch(); system(\"cls\");&#125;Pipe pipes[10];int main() &#123; Init(); InitLeftSide(); last_time = start_time = clock(); score = 0; const double g = 35; // Gravitational acceleration, grid / s^2 const double vx = 12.0; const double x = 27.0; double y = 5.0, vy = 0.0; int pipe_n = 0; pipes[pipe_n++] = RandomPipe(Columns - 1); while (1) &#123; if (kbhit()) &#123; char c = _getch(); if (c == 32) vy = -15.0; &#125; cur_time = clock(); double time_break = (double)(cur_time - last_time) / CLOCKS_PER_SEC; ClearBird(x, y); y = std::min(vy * time_break + y, 33.0); vy += g * time_break; if (y &lt; 1 - 1e-6) &#123; y = 1; vy = .0; &#125; DrawBird(x, y); for (int i = 0; i &lt; pipe_n; ++i) &#123; double px = pipes[i].x, px2 = pipes[i].x - vx * time_break; if ((int)(px + 0.5) != (int)(px2 + 0.5)) &#123; ClearPipe(pipes[i]); pipes[i].x = px2; DrawPipe(pipes[i]); &#125; else &#123; pipes[i].x = px2; &#125; &#125; if (Columns - pipes[pipe_n - 1].x &gt; 30) DrawPipe(pipes[pipe_n++] = RandomPipe(Columns - 1)); int j = 0; bool failed = false; for (int i = 0; i &lt; pipe_n; ++i) &#123; failed = failed || !CheckPipe((int)(x + 0.5), y, pipes[i]); if ((int)(pipes[i].x + 0.5) &gt;= LeftLineColumn) pipes[j++] = pipes[i]; else ++score; &#125; pipe_n = j; DrawLeftSide(); if (y &gt;= 33.0 - 1e-6 || failed) &#123; DrawBird(x, y); WriteMiddle(\"-------------------------------\", Lines / 2 - 2); WriteMiddle(\"| |\", Lines / 2 - 1); WriteMiddle(\"| |\", Lines / 2); WriteMiddle(\"| |\", Lines / 2 + 1); WriteMiddle(\"| |\", Lines / 2 + 2); WriteMiddle(\"-------------------------------\", Lines / 2 + 3); sprintf(tmp, \"Your score: %d!\", score); WriteMiddle(tmp, Lines / 2); WriteMiddle(\"Press any key to exit...\", Lines / 2 + 1); _getch(); return 0; &#125; last_time = cur_time; Sleep(40); &#125; return 0;&#125; _ **** 嘿嘿，慢慢玩 _","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"},{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"排序入坑之冒泡","slug":"排序入坑之冒泡","date":"2019-11-11T02:52:50.000Z","updated":"2019-12-12T11:54:45.207Z","comments":true,"path":"2019/11/11/排序入坑之冒泡/","link":"","permalink":"http://yoursite.com/2019/11/11/%E6%8E%92%E5%BA%8F%E5%85%A5%E5%9D%91%E4%B9%8B%E5%86%92%E6%B3%A1/","excerpt":"算法入坑第一步，冒泡排序。搜索算法是我们学习过程中必不可少的一步，其实理解以后，它也没有那么难…来先看个冒泡吧","text":"算法入坑第一步，冒泡排序。搜索算法是我们学习过程中必不可少的一步，其实理解以后，它也没有那么难…来先看个冒泡吧 冒泡算法如果遇到相等的值不进行交换，那这种排序方式是稳定的排序方式。 原理：比较两个相邻的元素，将值大的元素交换到右边 思路：依次比较相邻的两个数，将比较小的数放在前面，比较大的数放在后面。 第一次比较：首先比较第一和第二个数，将小数放在前面，将大数放在后面。 比较第2和第3个数，将小数 放在前面，大数放在后面。 …… 如此继续，知道比较到最后的两个数，将小数放在前面，大数放在后面，重复步骤，直至全部排序完成 在上面一趟比较完成后，最后一个数一定是数组中最大的一个数，所以在比较第二趟的时候，最后一个数是不参加比较的。 在第二趟比较完成后，倒数第二个数也一定是数组中倒数第二大数，所以在第三趟的比较中，最后两个数是不参与比较的。 依次类推，每一趟比较次数减少依次 举例： (1)要排序数组:[10,1,35,61,89,36,55] (2)第一趟排序： 第一次排序：10和1比较，10大于1，交换位置 [1,10,35,61,89,36,55] 第二次排序：10和35比较，10小于35，不交换位置 [1,10,35,61,89,36,55] 第三次排序：35和61比较，35小于61，不交换位置 [1,10,35,61,89,36,55] 第四次排序：61和89比较，61小于89，不交换位置 [1,10,35,61,89,36,55] 第五次排序：10和1比较，10大于1，交换位置 [1,10,35,61,89,36,55] 第六次排序：89和55比较，89大于55，交换位置 [1,10,35,61,36,55,89] 第一趟总共进行了六次比较，排序结果：[1,10,35,61,36,55,89] (3)第二趟排序： 第一次排序：1和10比较，1小于10，不交换位置 [1,10,35,61,36,55,89] 第二次排序：10和35比较，10小于35，不交换位置 [1,10,35,61,36,55,89] 第三次排序：35和61比较，35小于61，不交换位置 [1,10,35,61,36,55,89] 第四次排序：61和36比较，61大于36，交换位置 [1,10,35,36,61,55,89] 第五次排序：61和55比较，61大于55，交换位置 [1,10,35,36,55,61,89] 第二趟总共进行了5次比较，排序结果：[1,10,35,36,55,61,89] (4)第三趟排序： 第一次排序：1和10比较，1小于10，不交换位置 [1,10,35,36,55,61,89] 第二次排序：10和35比较，10小于35，不交换位置 [1,10,35,36,55,61,89] 第三次排序：35和36比较，35小于36，不交换位置 [1,10,35,36,55,61,89] 第四次排序：36和61比较，36小于61，不交换位置 1,10,35,36,55,61,89 第三趟总共进行了4次比较，排序结果：1,10,35,36,55,61,89 到目前位置已经为有序的情形了。 void sort(int a[], int n) //下面是函数sort的程序 &#123; int i,j,temp; //定义三个整型变量 for (j=0;j&lt;n-1;j++) //用一个嵌套循环来遍历一遍每一对相邻元素 （所以冒泡函数慢嘛，时间复杂度高） &#123; for (i=0;i&lt;n-1-j;i++) &#123; if(a[i]&gt;a[i+1]) //从大到小排就把左边的\"&gt;\"改为\"&lt;\" &#123; temp=a[i]; //a[i]与a[i+1](即a[i]后面那个) 交换 a[i]=a[i+1]; //基本的交换原理\"c=a;a=b;b=c\" a[i+1]=temp; &#125; &#125; &#125; &#125; 4.算法分析： (1)由此可见：N个数字要排序完成，总共进行N-1趟排序，每i趟的排序次数为(N-i)次，所以可以用双重循环语句，外层控制循环多少趟，内层控制每一趟的循环次数 (2)冒泡排序的优点：每进行一趟排序，就会少比较一次，因为每进行一趟排序都会找出一个较大值。如上例：第一趟比较之后，排在最后的一个数一定是最大的一个数，第二趟排序的时候，只需要比较除了最后一个数以外的其他的数，同样也能找出一个最大的数排在参与第二趟比较的数后面，第三趟比较的时候，只需要比较除了最后两个数以外的其他的数，以此类推……也就是说，没进行一趟比较，每一趟少比较一次，一定程度上减少了算法的量。 (3)时间复杂度 1.如果我们的数据正序，只需要走一趟即可完成排序。所需的比较次数C和记录移动次数M均达到最小值，即：Cmin=n-1;Mmin=0;所以，冒泡排序最好的时间复杂度为O(n)。 2.如果很不幸我们的数据是反序的，则需要进行n-1趟排序。每趟排序要进行n-i次比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值： 综上所述：冒泡排序总的平均时间复杂度为：O(n2) ,时间复杂度和数据状况无关。","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"素数，他，他又来了","slug":"素数，他，他又来了","date":"2019-11-10T12:48:53.000Z","updated":"2019-12-12T11:54:45.211Z","comments":true,"path":"2019/11/10/素数，他，他又来了/","link":"","permalink":"http://yoursite.com/2019/11/10/%E7%B4%A0%E6%95%B0%EF%BC%8C%E4%BB%96%EF%BC%8C%E4%BB%96%E5%8F%88%E6%9D%A5%E4%BA%86/","excerpt":"是他，是他，就是他，我们的…咳咳，走错片场了。一大堆素数朝你涌来，感谢埃拉托斯特尼，感谢欧拉(其实一点也不╮(╯▽╰)╭)","text":"是他，是他，就是他，我们的…咳咳，走错片场了。一大堆素数朝你涌来，感谢埃拉托斯特尼，感谢欧拉(其实一点也不╮(╯▽╰)╭) 上次实际上是对单个数进行判断是否为素数，但是如果我们有一大堆素数，还用上次的方法的话，那么，，，一定很有趣。好吧我就直接说了，一大堆数进行判断，一个一个的进行循环无疑是很浪费时间的，那么我们就可以构建一个素数表，只需要判断一堆数是否在素数表里就可以了。 有请第一位嘉宾——埃拉托斯特尼筛法(简称埃氏筛法) 埃氏筛法首先，我们将2到n范围内的所有整数写下来。其中最小的数字2是素数。将表中所有2的倍数都划去。表中剩余的最小数字是3，它不能被更小的数整除，所以是素数。再将表中所有3的倍数都划去。依此类推，如果表中剩余的最小数字是m时，m就是素数。然后将表中所有m的倍数都化去。像这样反复操作，就能依次枚举n以内的素数。 话不多说，上代码 bool u[MAXN]; //定义一个筛子int su[MAXN], num = 0; //定义一个素数表及表的长度void prepare() &#123; //埃氏筛法函数 int i, j; for (int i = 2; i &lt; MAXN; i++) //进行数组初始化 u[i] = true; for (i = 2; i &lt; MAXN; i++) //从2到MAXN进行循环 if (u[i]) &#123; //一旦u[i]是素数，那么筛去它小于MAXN的所有倍数 for (j = 2; i * j &lt; MAXN; j++) u[i * j] = false; &#125; for (i = 2; i &lt; MAXN; i++) //将筛出的素数填入素数表中 if (u[i]) su[++num] = i;&#125; 从上面埃氏筛法中，大家有没有发现一个问题 最小的素数是2，那么2的整数倍都不是素数，删去4,6,8…余下的数里，最小的素数是3，删去6,9,12…最终未被删去的数就是素数。但，这样在效率上有一个问题：一个数会被删去多次。例如42会被2 3 7都删去一遍，其时间复杂度为O(NlogNlogN)，，，所以，，， 有请欧拉上场对每个合数a×b，它会被每个质因数都筛去一遍，但我们只要用最小的质因数筛去就好了为此，我们需要记录下所产生的全部素数，上代码： bool u[MAXN]; //筛子int su[MAXN],num=0; //创建素数表及表长void eulerSieve()&#123; memset(u,true,sizeof(u)); //初始化 int i; for(i=2; i&lt;=MAXN; i++)&#123; //顺序分析区间表中的每个数 if(u[i]) su[++num]=i; for(int j=1; j&lt;=num; j++)&#123; if(i*su[j]&gt;MAXN) //如果i与当前素数的乘积大于MAXN，则跳过 break; u[i*su[j]]=false; //素数的倍数必为非素数，筛去 if(i%su[j]==0) //如果su[j]是i的最小素数，则进行下一个i的判断 break; &#125; &#125;&#125; 核心就是： if(i%su[j]==0) break; 如果i能整除su[k]，说明su[k]是i的因子，所以su[k]也是i的任意倍数的因子。所以su[k]也是i×su[x] (x&gt;k)的因子。考虑到primelist单增，对i×su[x]，su[k]就是它的比su[x]更小的因子。故不用考虑其后的质因子了（i×su[x]会被su[k]作为因子在i更大时被筛掉）","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"},{"name":"素数","slug":"素数","permalink":"http://yoursite.com/tags/%E7%B4%A0%E6%95%B0/"}]},{"title":"常用的模计算","slug":"常用的模计算","date":"2019-11-10T10:47:25.000Z","updated":"2019-12-12T11:54:45.181Z","comments":true,"path":"2019/11/10/常用的模计算/","link":"","permalink":"http://yoursite.com/2019/11/10/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%A8%A1%E8%AE%A1%E7%AE%97/","excerpt":"常用的模计算，没有公式证明，只统计了相关结论","text":"常用的模计算，没有公式证明，只统计了相关结论 模运算 对于正整数和整数 , ，定义如下运算：取模运算：a % p（或a mod p），表示a除以p的余数。 模p加法：(a + b) % p ，其结果是a+b算术和除以p的余数，也就是说，(a+b) = kp +r，则(a + b) % p = r。 模p减法：(a-b) % p ，其结果是a-b算术差除以p的余数。 模p乘法：(a * b) % p，其结果是 a * b算术乘法除以p的余数。 同余式：正整数a，b对p取模，它们的余数相同，记做 a ≡ b % p或者a ≡ b (mod p)。 n % p得到结果的正负由被除数n决定,与p无关。例如：7%4 = 3， -7%4 = -3， 7%-4 = 3， -7%-4 = -3。 （1）若p|(a-b)，则a≡b (% p)。例如 11 ≡ 4 (% 7)， 18 ≡ 4(% 7) （2）(a % p)=(b % p)意味a≡b (% p) （3）对称性：a≡b (% p)等价于b≡a (% p) （4）传递性：若a≡b (% p)且b≡c (% p) ，则a≡c (% p) 模运算与基本四则运算有些相似，但是除法例外。其规则如下： (a + b) % p = (a % p + b % p) % p （1） (a - b) % p = (a % p - b % p) % p （2） (a * b) % p = (a % p * b % p) % p （3） (a^b) % p = ((a % p)^b) % p （4） 结合律：((a+b) % p + c) % p = (a + (b+c) % p) % p （5） ((ab) % p * c)% p = (a * bc) % p （6）// (a%pb)%p=(ab)%p 交换律：(a + b) % p = (b+a) % p （7） (a * b) % p = (b * a) % p （8） 分配律：((a +b)% p * c) % p = ((a * c) % p + (b * c) % p) % p （9） 重要定理：若a≡b (% p)，则对于任意的c，都有(a + c) ≡ (b + c) (%p)；（10） 若a≡b (% p)，则对于任意的c，都有(a * c) ≡ (b * c) (%p)；（11） 若a≡b (% p)，c≡d (% p)，则 (a + c) ≡ (b + d) (%p)，(a - c) ≡ (b - d) (%p)，(a * c) ≡ (b * d) (%p)，(a / c) ≡ (b / d) (%p)； （12） 23333","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"},{"name":"模","slug":"模","permalink":"http://yoursite.com/tags/%E6%A8%A1/"}]},{"title":"动规的初级理解","slug":"动规的初级理解","date":"2019-11-10T10:37:01.000Z","updated":"2019-12-12T11:54:45.187Z","comments":true,"path":"2019/11/10/动规的初级理解/","link":"","permalink":"http://yoursite.com/2019/11/10/%E5%8A%A8%E8%A7%84%E7%9A%84%E5%88%9D%E7%BA%A7%E7%90%86%E8%A7%A3/","excerpt":"动态规划是学习算法过程中的一道绊脚石，那么今天就让我们，走进动态规划的世界里，不要恐惧它，其实挺有意思的","text":"动态规划是学习算法过程中的一道绊脚石，那么今天就让我们，走进动态规划的世界里，不要恐惧它，其实挺有意思的 一、基本概念动态规划过程是：每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划。 二、基本思想与策略基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。 由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。 与分治法最大的差别是：适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解）。 三、适用的情况能采用动态规划求解的问题的一般要具有3个性质： (1) 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。 (2) 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。 （3）有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势） 四、求解的基本步骤动态规划所处理的问题是一个多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线(通常是求最优的活动路线)。如图所示。动态规划的设计都有着一定的模式，一般要经历以下几个步骤。 初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态 图1 动态规划决策过程示意图 (1)划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。 (2)确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。 (3)确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。 (4)寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。 一般，只要解决问题的阶段、状态和状态转移决策确定了，就可以写出状态转移方程（包括边界条件）。 实际应用中可以按以下几个简化的步骤进行设计： （1）分析最优解的性质，并刻画其结构特征。 （2）递归的定义最优解。 （3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值 （4）根据计算最优值时得到的信息，构造问题的最优解 五、算法实现的说明动态规划的主要难点在于理论上的设计，也就是上面4个步骤的确定，一旦设计完成，实现部分就会非常简单。 使用动态规划求解问题，最重要的就是确定动态规划三要素： （1）问题的阶段 （2）每个阶段的状态 （3）从前一个阶段转化到后一个阶段之间的递推关系。 递推关系必须是从次小的问题开始到较大的问题之间的转化，从这个角度来说，动态规划往往可以用递归程序来实现，不过因为递推可以充分利用前面保存的子问题的解来减少重复计算，所以对于大规模问题来说，有递归不可比拟的优势，这也是动态规划算法的核心之处。 确定了动态规划的这三要素，整个求解过程就可以用一个最优决策表来描述，最优决策表是一个二维表，其中行表示决策的阶段，列表示问题状态，表格需要填写的数据一般对应此问题的在某个阶段某个状态下的最优值（如最短路径，最长公共子序列，最大价值等），填表的过程就是根据递推关系，从1行1列开始，以行或者列优先的顺序，依次填写表格，最后根据整个表格的数据通过简单的取舍或者运算求得问题的最优解。 f(n,m)=max&#123;f(n-1,m), f(n-1,m-w[n])+P(n,m)&#125; 六、动态规划算法基本框架for(j=1; j&lt;=m; j=j+1) // 第一个阶段 xn[j] = 初始值; for(i=n-1; i&gt;=1; i=i-1)// 其他n-1个阶段 for(j=1; j&gt;=f(i); j=j+1)//f(i)与i有关的表达式 xi[j]=j=max（或min）&#123;g(xi-1[j1:j2]), ......, g(xi-1[jk:jk+1])&#125;; t = g(x1[j1:j2]); // 由子问题的最优解求解整个问题的最优解的方案 print(x1[j1]); for(i=2; i&lt;=n-1; i=i+1）&#123; t = t-xi-1[ji]; for(j=1; j&gt;=f(i); j=j+1) if(t=xi[ji]) break;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"},{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"悲伤发廊","slug":"悲伤发廊","date":"2019-11-10T02:43:28.000Z","updated":"2019-12-12T13:12:43.207Z","comments":true,"path":"2019/11/10/悲伤发廊/","link":"","permalink":"http://yoursite.com/2019/11/10/%E6%82%B2%E4%BC%A4%E5%8F%91%E5%BB%8A/","excerpt":"超级悲伤的理发之行发廊深似水，小嘴跑火车，醒着进，晕着出 /欲哭无泪","text":"超级悲伤的理发之行发廊深似水，小嘴跑火车，醒着进，晕着出 /欲哭无泪 超级难受的理发经历，我真的只是想单纯的修一下边，结果操作就开始了。 “我看你头发有点硬啊” “。。。。。。” “来做做发根吧，不贵就几十块钱” “。。。。。。” “来蓬松蓬松，那样好看，我给你做下哈” “。。。。。。” “你想办那个档次的卡” “。。。。。。” 然后，，，就没有然后了 最后，，，一个简单的发型480？？？？ what？？？ 不说了，一把辛酸泪","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"心情","slug":"心情","permalink":"http://yoursite.com/tags/%E5%BF%83%E6%83%85/"}]},{"title":"初级素数判断","slug":"初级素数判断","date":"2019-11-10T00:57:52.000Z","updated":"2019-12-12T11:54:45.175Z","comments":true,"path":"2019/11/10/初级素数判断/","link":"","permalink":"http://yoursite.com/2019/11/10/%E5%88%9D%E7%BA%A7%E7%B4%A0%E6%95%B0%E5%88%A4%E6%96%AD/","excerpt":"这篇只是让大家初步了解如何判断素数，是最基础的内容，之后会讲一些欧拉，埃氏等素数筛的方法","text":"这篇只是让大家初步了解如何判断素数，是最基础的内容，之后会讲一些欧拉，埃氏等素数筛的方法 第一次的想法:==让它爆搜一遍不就好了== 爆搜大法好爆搜大法好 具体实现就是让数n从2开始模,一直模到n-1,如果都不能被整除,那就是素数紧扣定义 //判断是否是素数1#include &lt;iostream&gt;using namespace std;int main() &#123; cout &lt;&lt; \"please inpout a number.\"; int m; cin &gt;&gt; m; for (int i = 2; i &lt; m; ++i) if (m%i == 0) &#123; cout &lt;&lt; m &lt;&lt; \" isn't a prime\\n\"; return 1; &#125; cout &lt;&lt; m &lt;&lt; \" is a prime\\n\"; return 0;&#125; 这么复杂,那来进行下简单优化:如果一个数有因子的话，那么在它的平方根数以内就应该有，否则就没有因子。例如66的平方根在8与9之间，因为66不是素数，，则它一定有比8还小的因子，我们知道66的因子是2、3、6等那我们就可以这样写了 for (int i = 2; i &lt; sqrt(m); ++i)&#123; if (m%i == 0) &#123; cout &lt;&lt; m &lt;&lt; \" isn't a prime\\n\"; return 1;&#125; 本次初级素数判断就先到这里有没有感觉到循环挺浪费时间的呢那去想想有什么方法能够进一步降低时间复杂度","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"},{"name":"素数","slug":"素数","permalink":"http://yoursite.com/tags/%E7%B4%A0%E6%95%B0/"}]},{"title":"hello","slug":"hello","date":"2019-11-10T00:51:16.000Z","updated":"2019-12-12T11:54:45.168Z","comments":true,"path":"2019/11/10/hello/","link":"","permalink":"http://yoursite.com/2019/11/10/hello/","excerpt":"","text":"重建 GitHub+hexo 博客的第一篇笔记虽然GitHub有时候不太稳定，但我依然是很爱她的，今后的blog将不再漂泊，我会陆陆续续将其它地方的blog渐渐挪到这上面来，现在虽然用的还是hexo官网上的主题，emmmm，肯定是要好好学学web技术，未来全部换成自己写的组件","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"}]}]}